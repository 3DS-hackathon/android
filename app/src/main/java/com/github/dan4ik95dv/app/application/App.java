package com.github.dan4ik95dv.app.application;import android.app.Application;import android.content.Context;import android.support.multidex.MultiDex;import com.crashlytics.android.Crashlytics;import com.facebook.stetho.Stetho;import com.github.dan4ik95dv.app.BuildConfig;import com.github.dan4ik95dv.app.di.component.ApplicationComponent;import com.github.dan4ik95dv.app.di.component.ClientComponent;import com.github.dan4ik95dv.app.di.component.DaggerApplicationComponent;import com.github.dan4ik95dv.app.di.component.DaggerClientComponent;import com.github.dan4ik95dv.app.di.module.ApplicationModule;import com.github.dan4ik95dv.app.di.module.ClientModule;import com.github.dan4ik95dv.app.di.module.NetModule;import com.github.dan4ik95dv.app.util.Constants;import com.uphyca.stetho_realm.RealmInspectorModulesProvider;import net.danlew.android.joda.JodaTimeAndroid;import java.util.regex.Pattern;import io.fabric.sdk.android.Fabric;import io.realm.Realm;import io.realm.RealmConfiguration;public class App extends Application {    private static final String TAG = "App";    private static App self;    private ClientComponent mClientComponent;    private ApplicationComponent mApplicationComponent;    public static App getInstance() {        return self;    }    @Override    public void onCreate() {        super.onCreate();        self = this;        if (BuildConfig.DEBUG) {            Stetho.initialize(Stetho.newInitializerBuilder(this)                    .enableDumpapp(Stetho.defaultDumperPluginsProvider(this))                    .enableWebKitInspector(RealmInspectorModulesProvider.builder(this)                            .withDescendingOrder()                            .withLimit(1000)                            .databaseNamePattern(Pattern.compile(Constants.NAME_SCHEME))                            .build())                    .build());//          OneSignal.setLogLevel(OneSignal.LOG_LEVEL.DEBUG, OneSignal.LOG_LEVEL.WARN);        }        JodaTimeAndroid.init(this);        Fabric.with(this, new Crashlytics());//        OneSignal.startInit(this).setNotificationOpenedHandler(new NotificationOpenedHandler(this, getApplicationContext())).init();        initRealm();        mClientComponent = DaggerClientComponent.builder()                .applicationModule(new ApplicationModule(this))                .netModule(new NetModule())                .clientModule(new ClientModule())                .build();        mApplicationComponent = DaggerApplicationComponent.builder()                .applicationModule(new ApplicationModule(this))                .build();    }    void initRealm() {        RealmConfiguration realmConfiguration = new RealmConfiguration.Builder(this)                .name(Constants.NAME_SCHEME)                .schemaVersion(Constants.SCHEMA_VERSION)                .migration(new Migration())                .build();        Realm.setDefaultConfiguration(realmConfiguration);    }    @Override    protected void attachBaseContext(Context base) {        super.attachBaseContext(base);        MultiDex.install(this);    }    public ClientComponent getClientComponent() {        return mClientComponent;    }    public ApplicationComponent getApplicationComponent() {        return mApplicationComponent;    }}